#ifndef GAMEMODEL_H
#define GAMEMODEL_H
//五子棋游戏模型类
#include<vector>
//游戏类型，人人，人机，机机
enum GameType//游戏模式
{
    Man,
    AI,
    AIAI,
    Online
};
enum GameStatus//游戏状态
{
    PLAYING,
    WIN,
    DEADED
};
//棋盘大小
const int BOARD_GARD_SIZE=30;

const int MARGIN=150;//棋盘边缘空隙
const int CHESS_RADIUS=8;//棋子半径
const int MARK_SIZE=3;//落子标记边长
const int BLOCK_SIZE=20;//格子的大小,原本40
const int POS_OFFSET=BLOCK_SIZE*0.4;//20 鼠标点击的模糊距离上限

const int AI_THINK_TIME=300;//ai下棋的思考时间

class GameModel
{
    friend class MainWindow;
public:
    GameModel(){};

public:
    //存储当前游戏棋盘和棋子的情况，空白为0，黑子为1，白子-1
    //如果用二维数组写：  int gamedata[16][16]
    std::vector<std::vector<int>>gameMapVec;//相当于二维数组

    //存储各个点位的评分情况，作为ai下棋依据
    std::vector<std::vector<int>>scoreMapVec;

    //标示下棋方，true：黑棋方 false：白棋方（ai）
    bool playerFlag;

    GameType gameType;//游戏模式：人机博弈，双人还是机机博弈

    GameStatus gameStatus;//游戏状态

    void startGame(GameType type);//开始游戏
    void calculateScore();//计算评分
    void actionByPerson(int row,int col);//人执行下棋
    void actionByAI(int &clickRow,int &clickCol);//机器执行下棋
    void updateGameMap(int row,int col);//每次落子后更新游戏棋盘
    bool isWin(int row,int col);//判断游戏是否胜利
    bool isDeadGame();//判断是否和棋
};

#endif // GAMEMODEL_H
